//   Copyright (c) 2021 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "paddle/fluid/operators/class_center_sample_op.h"

namespace paddle {
namespace operators {

class ClassCenterSampleOp : public framework::OperatorWithKernel {
 public:
  using framework::OperatorWithKernel::OperatorWithKernel;
  void InferShape(framework::InferShapeContext* ctx) const override {
    OP_INOUT_CHECK(ctx->HasInput("X"), "Input", "X", "ClassCenterSample");
    OP_INOUT_CHECK(ctx->HasOutput("Out"), "Output", "Out", "ClassCenterSample");
    OP_INOUT_CHECK(ctx->HasOutput("SampledClass"), "Output", "SampledClass",
                   "ClassCenterSample");

    auto x_dims = ctx->GetInputDim("X");
    PADDLE_ENFORCE_GE(x_dims.size(), 1,
                      platform::errors::InvalidArgument(
                          "Rank of Input(X) should be at least 1, "
                          "but the value given is %d.",
                          x_dims.size()));

    ctx->SetOutputDim("Out", x_dims);
    ctx->SetOutputDim("SampledClass", x_dims);
    ctx->ShareLoD("X", /* --> */ "Out");
    ctx->ShareLoD("X", /* --> */ "SampledClass");
  }

 protected:
  framework::OpKernelType GetExpectedKernelType(
      const framework::ExecutionContext& ctx) const override {
    return framework::OpKernelType(
        OperatorWithKernel::IndicateVarDataType(ctx, "X"),
        ctx.device_context());
  }
};

class ClassCenterSampleOpMaker : public framework::OpProtoAndCheckerMaker {
 public:
  void Make() override {
    AddInput(
        "X",
        "(Tensor<int|int64>) The input of ClassCenterSample op. Each value "
        "of X is an integer label.");
    AddOutput("Out",
              "(Tensor<int|int64>) Output tensor with same shape as X. "
              "Each label is remap using sampled class.");
    AddOutput("SampledClass", "(Tensor<int|int64>) The sampled class center.");
    AddAttr<int>("num_class",
                 "A positive integer to specify the total number of classes.");
    AddAttr<float>("ratio", "The sample ratio over num_class.");
    AddAttr<int>("ignore_label",
                 "An integer label value to ignore in sample process.")
        .SetDefault(-1);
    AddAttr<int>("seed",
                 "Random seed used for sampling. "
                 "0 means use a seed generated by the system."
                 "Note that if seed is not 0, this operator will always "
                 "generate the same random numbers every time. [default 0].")
        .SetDefault(0);
    AddComment(R"DOC(
Give a label list, first get unique positive class center in label list,
then randomly sample negative class centers with a given sampling ratio,
and return sampled class center and remap the input label list
using sampled class center. If `len(unique_label_list) < num_class * ratio`, then we
sample randomly `num_class * ratio - len(unique_label_list)` class center from
`[0, num_class) \ unique_label_list`. If `len(unique_label_list) >= num_class * ratio`,
then sampled_class_center = unique_label_list.

Examples:

    Example 1
    X is a Tensor of integer values:
      X.shape = [4]
      X.data = [-1, 0, -1, -1]
    
    suppose num_class = 5, ratio = 0.4 and ignore_label = -1
    
    we can get the Out:
      Out.shape = [4]
      Out.data = [-1, 0, -1, 1]
    and SampledClass:
      SampledClass.shape [2]
      SampledClass.data = [0, 4]

    Example 2
    X is a Tensor of integer values:
      X.shape = [4]
      X.data = [0, -1, 3, 2]
    
    suppose num_class = 5, ratio = 0.4 and ignore_label = -1
    
    we can get the Out:
      Out.shape = [4]
      Out.data = [0, -1, 2, 1]
    and SampledClass:
      SampledClass.shape [3]
      SampledClass.data = [0, 2, 3]

    Example 3
    X is a Tensor of integer values:
      X.shape = [4]
      X.data = [0, -1, 3, 0]
    
    suppose num_class = 5, ratio = 0.4 and ignore_label = -1
    
    we can get the Out:
      Out.shape = [4]
      Out.data = [0, -1, 1, 0]
    and SampledClass:
      SampledClass.shape [3]
      SampledClass.data = [0, 3]
    
)DOC");
  }
};

}  // namespace operators
}  // namespace paddle

namespace ops = paddle::operators;
namespace plat = paddle::platform;
REGISTER_OP_WITHOUT_GRADIENT(class_center_sample, ops::ClassCenterSampleOp,
                             ops::ClassCenterSampleOpMaker);
REGISTER_OP_CPU_KERNEL(class_center_sample,
                       ops::ClassCenterSampleCPUKernel<int64_t>,
                       ops::ClassCenterSampleCPUKernel<int>);
